<?php

namespace Proxies\__CG__\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Post extends \AppBundle\Entity\Post implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'title', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'category', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'slug', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'content', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'shortContent', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'createdDate', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'updateDate', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'imgPost', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'photoPath', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'person', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'views', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'checked'];
        }

        return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'title', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'category', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'slug', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'content', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'shortContent', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'createdDate', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'updateDate', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'imgPost', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'photoPath', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'person', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'views', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'checked'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Post $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', [$title]);

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', []);

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setContent($content)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContent', [$content]);

        return parent::setContent($content);
    }

    /**
     * {@inheritDoc}
     */
    public function getContent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContent', []);

        return parent::getContent();
    }

    /**
     * {@inheritDoc}
     */
    public function setShortContent($shortContent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setShortContent', [$shortContent]);

        return parent::setShortContent($shortContent);
    }

    /**
     * {@inheritDoc}
     */
    public function getShortContent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShortContent', []);

        return parent::getShortContent();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedDate($createdDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedDate', [$createdDate]);

        return parent::setCreatedDate($createdDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedDate', []);

        return parent::getCreatedDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdateDate($updateDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdateDate', [$updateDate]);

        return parent::setUpdateDate($updateDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdateDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdateDate', []);

        return parent::getUpdateDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setImgPost($imgPost)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImgPost', [$imgPost]);

        return parent::setImgPost($imgPost);
    }

    /**
     * {@inheritDoc}
     */
    public function getImgPost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImgPost', []);

        return parent::getImgPost();
    }

    /**
     * {@inheritDoc}
     */
    public function setPerson(\AppBundle\Entity\Person $person = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPerson', [$person]);

        return parent::setPerson($person);
    }

    /**
     * {@inheritDoc}
     */
    public function getPerson()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPerson', []);

        return parent::getPerson();
    }

    /**
     * {@inheritDoc}
     */
    public function setSlug($slug)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSlug', [$slug]);

        return parent::setSlug($slug);
    }

    /**
     * {@inheritDoc}
     */
    public function getSlug()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSlug', []);

        return parent::getSlug();
    }

    /**
     * {@inheritDoc}
     */
    public function setViews($views)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setViews', [$views]);

        return parent::setViews($views);
    }

    /**
     * {@inheritDoc}
     */
    public function getViews()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getViews', []);

        return parent::getViews();
    }

    /**
     * {@inheritDoc}
     */
    public function setChecked($checked)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setChecked', [$checked]);

        return parent::setChecked($checked);
    }

    /**
     * {@inheritDoc}
     */
    public function getChecked()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChecked', []);

        return parent::getChecked();
    }

    /**
     * {@inheritDoc}
     */
    public function getPhotoPath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPhotoPath', []);

        return parent::getPhotoPath();
    }

    /**
     * {@inheritDoc}
     */
    public function setPhotoPath(\Symfony\Component\HttpFoundation\File\UploadedFile $photoPath = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPhotoPath', [$photoPath]);

        return parent::setPhotoPath($photoPath);
    }

    /**
     * {@inheritDoc}
     */
    public function subirFoto()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'subirFoto', []);

        return parent::subirFoto();
    }

    /**
     * {@inheritDoc}
     */
    public function addCategory(\AppBundle\Entity\Category $category)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCategory', [$category]);

        return parent::addCategory($category);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCategory(\AppBundle\Entity\Category $category)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCategory', [$category]);

        return parent::removeCategory($category);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategory', []);

        return parent::getCategory();
    }

}
